# each list element is a list of tuples containing the coordinates of the
# vertices of the rectangular obstacles in the workspace
WO:
  - [[1, 1], [2, 1], [2, 5], [1, 5]]
  - [[3, 4], [4, 4], [4, 12], [3, 12]]
  - [[3, 12], [12, 12], [12, 13], [3, 13]]
  - [[12, 5], [13, 5], [13, 13], [12, 13]]
  - [[6, 5], [12, 5], [12, 6], [6, 6]]

# coordinates of the robot start state in state space
# [x, y]
startState: [0, 0]

# coordinates of the robot goal state in the workspace
# [x, y]
goalState: [10, 10]

# determines N such that CSpace is discretized into an NxN grid
linearDiscretizationDensity: 50

# determines whether the CSpace will be made square when enlarged for planning.
# for the gradient descent planner, you must set this to be True
makeSquareCSpace: True

##
## setup gradient descent params
##

# determines how distance to obstacles should be incorporated:
#   
#   'perObstacle'  
#   calculate minimum distance to each obstacle
#   
#   'minObstacleDist'
#   use the brushfire algorithm to compute minimum distance to ANY obstacle
#   from each state
distanceMeasurement: 'perObstacle'

# need a list of critical potential values for each obstacle
# perObstacle:
#     - 0.1
#     - 0.8
#     - 0.8
#     - 0.8
#     - 1.4
# minObstacleDist: 8
qStars:
  - 0.1
  - 0.8
  - 0.8
  - 0.8
  - 1.8

# threshold distance from goal for attractive potential
# perObstacle: 3
# minObstacleDist: 8
dStarGoal: 3

# goal region threshold
goalEpsilon: 0.25

# parameter to scale the attractive force
# perObstacle: 8
# minObstacleDist: 4
attractivePotentialGain: 8

# parameter to scale the attractive force
# perObstacle: 0.32
# minObstacleDist: 83
repulsivePotentialGain: 0.32

# determine step size of the gradient descent algorithm
# perObstacle: 0.01
# minObstacleDist: 0.001
stepSize: 0.002
