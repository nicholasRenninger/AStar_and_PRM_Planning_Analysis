# each list element is a list of tuples containing the coordinatesof the
# vertices of the rectangular obstacles in the workspace
# 
# these coords are in CCW order to make sure its a square yo
WO:
  - [[3, 2], [5, 2], [5, 0], [3, 0], [3, 2]]
  - [[6, 0], [8, 0], [8, -2], [6, -2], [6, 0]]

# coordinates of the robot start state in state space
# [x, y]
startState: [0, 0]

# coordinates of the robot goal state in the workspace
# [x, y]
goalState: [10, 0]

# determines N such that CSpace is discretized into an NxN grid
linearDiscretizationDensity: 50

# determines whether the CSpace will be made square when enlarged for planning.
# for the gradient descent planner, you must set this to be True
makeSquareCSpace: True

##
## setup gradient descent params
##

# determines how distance to obstacles should be incorporated:
#   
#   'perObstacle'  
#   calculate minimum distance to each obstacle
#   
#   'minObstacleDist'
#   use the brushfire algorithm to compute minimum distance to ANY obstacle
#   from each state
distanceMeasurement: 'minObstacleDist'

# need a list of critical potential values for each obstacle
# perObstacle:
#     - 0.1
#     - 0.8
#     - 0.8
#     - 0.8
#     - 1.4
# minObstacleDist: 4
qStars:
  - 4
  - 0.1

# threshold distance from goal for attractive potential
# perObstacle: 3
# minObstacleDist: 8
dStarGoal: 8

# goal region threshold
goalEpsilon: 0.25

# parameter to scale the attractive force
# perObstacle: 8
# minObstacleDist: 10
attractivePotentialGain: 10

# parameter to scale the attractive force
# perObstacle: 0.3
# minObstacleDist: 100
repulsivePotentialGain: 100

# determine step size of the gradient descent algorithm
# perObstacle: 0.01
# minObstacleDist: 0.005
stepSize: 0.005
