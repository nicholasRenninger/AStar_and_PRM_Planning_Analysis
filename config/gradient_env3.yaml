# each list element is a list of tuples containing the coordinatesof the
# vertices of the rectangular obstacles in the workspace
WO:
  - [[-6, -6], [25, -6], [25, -5], [-6, -5]]
  - [[-6, 5], [30, 5], [30, 6], [-6, 6]]
  - [[-6, -5], [-5, -5], [-5, 5], [-6, 5]]
  - [[4, -5], [5, -5], [5, 1], [4, 1]]
  - [[9, 0], [10, 0], [10, 5], [9, 5]]
  - [[14, -5], [15, -5], [15, 1], [14, 1]]
  - [[19, 0], [20, 0], [20, 5], [19, 5]]
  - [[24, -5], [25, -5], [25, 1], [24, 1]]
  - [[29, 0], [30, 0], [30, 5], [29, 5]]

# coordinates of the robot start state in state space
# [x, y]
startState: [0, 0]

# coordinates of the robot goal state in the workspace
# [x, y]
goalState: [35, 0]

# determines N such that CSpace is discretized into an NxN grid
linearDiscretizationDensity: 40

##
## setup gradient descent params
##

# determines how distance to obstacles should be incorporated:
#   
#   'perObstacle'  
#   calculate minimum distance to each obstacle
#   
#   'minObstacleDist'
#   use the brushfire algorithm to compute minimum distance to ANY obstacle
#   from each state
distanceMeasurement: 'perObstacle'

# need a list of critical potential values for each obstacle
# perObstacle:
# - 0.4
# - 0.4
# - 0.4
# - 0.4
# - 0.4
# - 0.4
# - 0.4
# - 0.4
# - 0.4
# minObstacleDist: 8
qStars:
  - 8
  - 8
  - 8
  - 8
  - 8
  - 8
  - 8
  - 8
  - 8

# threshold distance from goal for attractive potential
# perObstacle: 3
# minObstacleDist: 8
dStarGoal: 12

# goal region threshold
goalEpsilon: 0.25

# parameter to scale the attractive force
# perObstacle: 8
# minObstacleDist: 4
attractivePotentialGain: 1

# parameter to scale the attractive force
# perObstacle: 0.3
# minObstacleDist: 83
repulsivePotentialGain: 0.5

# determine step size of the gradient descent algorithm
# perObstacle: 0.01
# minObstacleDist: 0.001
stepSize: 0.005
